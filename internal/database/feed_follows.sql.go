// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed_follows.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
INSERT INTO feed_follows (id, created_at, updated_at, feed_id, user_id)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3
  )
  RETURNING id, created_at, updated_at, feed_id, user_id
)

SELECT
    inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.feed_id, inserted_feed_follow.user_id,
    feeds.name as feed_name,
    users.name as user_name
FROM
    inserted_feed_follow
INNER JOIN feeds
    ON inserted_feed_follow.feed_id = feeds.id
INNER JOIN users
    ON inserted_feed_follow.user_id = users.id
`

type CreateFeedFollowParams struct {
	ID     uuid.UUID
	FeedID uuid.UUID
	UserID uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	FeedID    uuid.UUID
	UserID    uuid.UUID
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.ID, arg.FeedID, arg.UserID)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedID,
		&i.UserID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const getFeedFollowsForUserByID = `-- name: GetFeedFollowsForUserByID :many
SELECT
    feed_follows.id, feed_follows.created_at, feed_follows.updated_at, feed_follows.feed_id, feed_follows.user_id, users.name AS user_name, feeds.name AS feed_name, feeds.url as url
FROM
    feed_follows
INNER JOIN feeds
    ON feed_follows.feed_id = feeds.id
INNER JOIN users
    ON feed_follows.user_id = users.id
WHERE
    feed_follows.user_id = $1
`

type GetFeedFollowsForUserByIDRow struct {
	ID        uuid.UUID
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	FeedID    uuid.UUID
	UserID    uuid.UUID
	UserName  string
	FeedName  string
	Url       string
}

func (q *Queries) GetFeedFollowsForUserByID(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUserByID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserByIDRow
	for rows.Next() {
		var i GetFeedFollowsForUserByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.UserID,
			&i.UserName,
			&i.FeedName,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowFeed = `-- name: UnfollowFeed :exec
DELETE FROM feed_follows
    WHERE
        feed_follows.feed_id = $1 AND
        feed_follows.user_id = $2
`

type UnfollowFeedParams struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) UnfollowFeed(ctx context.Context, arg UnfollowFeedParams) error {
	_, err := q.db.ExecContext(ctx, unfollowFeed, arg.FeedID, arg.UserID)
	return err
}
